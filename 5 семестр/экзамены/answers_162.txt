0. [Прерывания] Прекращение выполнения текущей команды или текущей последовательности команд для обработки некоторого события специальной программой – это
	0.  (+) прерывание
	1.  (-) исключение
	2.  (-) обработка событий
	3.  (-) правильных вариантов нет
	4.  (-) системный вызов
1. [Прерывания] Не существует прерываний
	0.  (+) пользовательских
	1.  (-) аппаратных
	2.  (-) внешних
	3.  (-) внутренних
	4.  (-) программных
2. [Прерывания] Внешние прерывания
	0.  (+) аппаратные
	1.  (-) пользовательские
	2.  (-) правильных вариантов нет
	3.  (-) программные
	4.  (-) системные
3. [Прерывания] При делении на ноль происходит
	0.  (+) внутреннее прерывание
	1.  (-) внешнее прерывание
	2.  (-) пользовательское прерывание
	3.  (-) правильных вариантов нет
	4.  (-) программное прерывание
4. [Прерывания] При нажатии на кнопку ESC происходит
	0.  (+) внешнее прерывание
	1.  (-) внутреннее прерывание
	2.  (-) пользовательское прерывание
	3.  (-) правильных вариантов нет
	4.  (-) программное прерывание
5. [Прерывания] При движении мышки происходит
	0.  (+) внешнее прерывание
	1.  (-) внутреннее прерывание
	2.  (-) пользовательское прерывание
	3.  (-) правильных вариантов нет
	4.  (-) программное прерывание
6. [Прерывания] Процессор занимается выяснением устройства, пославшего прерывания при
	0.  (+) опрашиваемом способе обработки прерываний
	1.  (-) векторном способе обработке прерываний
	2.  (-) использовании контроллера прерываний
	3.  (-) маскируемом способе обработки прерываний
	4.  (-) правильных вариантов нет
7. [Прерывания] Контроллер прерываний
	0.  (+) опрашивает устройства и определяет вектор прерывания
	1.  (-) контролирует работу линий прерывания
	2.  (-) маскирует прерывания
	3.  (-) правильных вариантов нет
	4.  (-) управляет выполнением обработчика прерываний
8. [Средства синхронизаци] Целая переменная, принимающая неотрицательные значения, доступ любого процесса к которой, за исключением момента ее инициализации, может осуществляться только через две атомарные операции
	0.  (+) Семафор
	1.  (-) Монитор
	2.  (-) Сигнал
	3.  (-) Переменная состояния
	4.  (-) Финальная переменная
	5.  (-) Мьютекс
9. [Средства синхронизаци] Операция P над семафором S
	0.  (+) пока S == 0 процесс блокируется;
S = S – 1;
	1.  (-) пока S == 0 процесс блокируется;
S = 1;
	2.  (-) пока S == 0 процесс блокируется;
S = S + 1;
	3.  (-) пока S == 1 процесс блокируется;
S = S – 1;
	4.  (-) пока S == 1 процесс блокируется;
S = S + 1;
10. [Средства синхронизаци] Операция V над семафором S
	0.  (+) S = S + 1
	1.  (-) S = 1
	2.  (-) S = S - 1
	3.  (-) пока S == 0 процесс блокируется;
S = S – 1;
	4.  (-) пока S == 0 процесс блокируется;
S = S + 1;
11. [Средства синхронизаци] Двоичный семафор называется
	0.  (+) мьютекс
	1.  (-) барьер
	2.  (-) двойка
	3.  (-) семафор Дейкстры
	4.  (-) семафор Петерсона
12. [Средства синхронизаци] P(empty); 
P(mutex); 
действия с буфером
V(mutex);
V(full); 

Представлен какой из алгоритмов задачи производителя-потребителя?
	0.  (+) Производитель
	1.  (-) Грузчик
	2.  (-) Официант
	3.  (-) Потребитель
	4.  (-) Философ
13. [Средства синхронизаци] Основной недостаток семафоров
	0.  (+) Сложность отслеживания вызовов семафоров
	1.  (-) Медленная работа
	2.  (-) Необходимость прямого участия программиста
	3.  (-) Необходимость участия ОС
	4.  (-) Сложность реализации
14. [Средства синхронизаци] Главный недостаток алгоритмов реализации взаимоисключения
	0.  (+) Бесполезный цикл проверки условия в прологе
	1.  (-) Невозможность реализации
	2.  (-) Необходимость прямого участия программиста
	3.  (-) Необходимость участия ОС
	4.  (-) Нет
15. [Средства синхронизаци] Монитор Хоара - это
	0.  (+) Механизм синхронизации более высокого уровня, чем семафоры
	1.  (-) OLED-дисплей нового поколения
	2.  (-) Автоматизированная система синхронизации
	3.  (-) Модифицированный LCD-дисплей
	4.  (-) Система отслеживания значений семафоров
16. [Средства синхронизаци] Представлен какой из алгоритмов задачи производителя-потребителя?

P(full); 
P(mutex); 
get_item; 
V(mutex); 
V(empty);
	0.  (-) Философ
	1.  (-) Производитель
	2.  (-) Читатель
	3.  (-) Писатель
	4.  (+) Потребитель
17. [Средства синхронизаци] Главный недостаток мониторов Хоара
	0.  (-) Невозможность реализации
	1.  (-) Реализация только на языках поддерживающих ООП
	2.  (+) Реализация только на специальных языках поддерживающих мониторы
	3.  (-) Реализация через сообщения
	4.  (-) Нет недостатков
18. [Средства синхронизаци] Механизм со скрытыми взаимоисключениями
	0.  (-) семафор
	1.  (-) мьютекс
	2.  (+) сообщения
	3.  (-) мониторы Хоара
	4.  (-) фьютекс
19. [Тупики] Процесс находится в состоянии тупика, если
	0.  (+) он ожидает события, которое никогда не произойдет
	1.  (-) время реакции не соответствует ожиданиям пользователя
	2.  (-) для него не осталось свободных ресурсов
	3.  (-) он завершает свое выполнение
	4.  (-) скорость его работы ниже требований ОС
20. [Тупики] Взаимоблокировка - это
	0.  (+) тупик
	1.  (-) inode
	2.  (-) барьер
	3.  (-) мьютекс
	4.  (-) семафор
21. [Тупики] Для образования тупика необходимым и достаточным является выполнение
	0.  (+) Условие взаимоисключения
	1.  (+) Условие ожидания ресурсов
	2.  (+) Условие неперераспределяемости
	3.  (+) Условие кругового ожидания
	4.  (-) Переменное условие
	5.  (-) Одно из перечисленных условий
22. [Тупики] К основным направлениям борьбы с тупиками не относится
	0.  (+) перераспределение
	1.  (-) восстановление
	2.  (-) Все перечисленные варианты
	3.  (-) обнаружение
	4.  (-) предотвращение
23. [Тупики] Проблему тупиков можно игнорировать, поскольку
	0.  (+) борьба с тупиками может быть дороже, чем ущерб от них
	1.  (-) большинство ресурсов системы разделяемые
	2.  (-) возникновение тупиков - крайне редкое явление
	3.  (-) их не существует
	4.  (-) только в системах реального времени бывают тупики
24. [Тупики] Алгоритм банкира предотвращает тупики
	0.  (+) путем тщательного распределения ресурсов
	1.  (-) правильных вариантов нет
	2.  (-) путем исключения неравномерности выделения ресурсов
	3.  (-) путем оценки работоспособности системы
	4.  (-) путем планирования использования ресурсов
25. [Тупики] В основе алгоритма банкира лежит понятие
	0.  (+) надежное состояние
	1.  (-) девальвационное ожидание
	2.  (-) кредитная история
	3.  (-) овердрафт по счету
	4.  (-) ресурсная политика
26. [Тупики] Упорядочивание ресурсов - это один из способов
	0.  (+) нарушения условия кругового ожидания
	1.  (-) обнаружения тупиков
	2.  (-) перераспределения ресурсов
	3.  (-) правильных вариантов нет
	4.  (-) реализации алгоритма банкира
27. [Тупики] К основным направлениям борьбы с тупиками относится
	0.  (+) Игнорирование проблемы в целом
	1.  (+) Предотвращение тупиков
	2.  (+) Обнаружение тупиков
	3.  (+) Восстановление после тупиков
	4.  (-) Круговое ожидание
	5.  (-) Ожидание ресурсов
	6.  (-) Надежное состояние
28. [Тупики] Процесс должен запрашивать все необходимые ему ресурсы сразу. До тех пор пока они не предоставлены, процесс не может продолжать выполнение.Если некоторые ресурсы, которые были нужны данному процессу, уже заняты другими процессами, он освобождает все ресурсы, которые были ему выделены, и пытается повторить попытку. Такая стратегия имеет название...
	0.  (-) стратегия банкира
	1.  (-) стратегия игнорирования
	2.  (-) стратегия перераспределения ресурсов
	3.  (+) стратегия двухфазного захвата
	4.  (-) спулинг
29. [Тупики] Сложность восстановления после тупиков
	0.  (+) нет достаточно эффективных средств, чтобы приостановить процесс, вывести его из системы и возобновить впоследствии с того места, где он был остановлен.
	1.  (+) использование таких средств требует затрат и внимания оператора
	2.  (-) нет никакой возможности временно забрать ресурс у текущего владельца
	3.  (-) невозможно выявить процесс, который занимает необходимые ресурсы.
	4.  (-) необходима обязательная реализация средств отката состояния системы
30. [Память] Свойство реальных программ, в течение ограниченного отрезка времени способных работать с небольшим набором адресов памяти
	0.  (+) локальность
	1.  (-) глобальность
	2.  (-) детерминированность
	3.  (-) надежность
	4.  (-) недетерминированность
31. [Память] Совокупность всех логических адресов называется
	0.  (+) логическим адресным пространством
	1.  (-) логическим адресным пулом
	2.  (-) логическим адресным сегментом
	3.  (-) логическим адресным стеком
	4.  (-) логической адресной кучей
32. [Память] Схема управления памятью с фиксированными разделами имеет
	0.  (+) недостаток – внутренняя фрагментация
	1.  (-) достоинство – много незанятой памяти остается
	2.  (-) достоинство – сколько разделов, столько и процессов
	3.  (-) недостаток – сложно разбить память на фиксированные разделы
	4.  (-) правильных вариантов нет
33. [Память] Логический адрес при страничной адресации состоит из
	0.  (+) двух чисел
	1.  (-) не существует
	2.  (+) одного числа
	3.  (-) трех чисел
	4.  (-) четырех чисел
34. [Память] Логический адрес при сегментно-страничной адресации состоит из
	0.  (+) трех чисел
	1.  (-) двух чисел
	2.  (-) не существует
	3.  (-) одного числа
	4.  (-) четырех чисел
35. [Память] Логический адрес при сегментной адресации состоит из
	0.  (+) двух чисел
	1.  (-) не существует
	2.  (-) одного числа
	3.  (-) трех чисел
	4.  (-) четырех чисел
36. [Память] Страничный кадр – это
	0.  (+) физическая страница
	1.  (-) логическая страница
	2.  (-) логический сегмент
	3.  (-) правильных вариантов нет
	4.  (-) физический сегмент
37. [Память] Регистры перемещения могут использоваться для
	0.  (+) связывания адресов на этапе выполнения
	1.  (-) правильных вариантов нет
	2.  (-) связывания адресов на этапе компиляции
	3.  (-) таких не бывает
	4.  (-) трансляции адресов во время загрузки
38. [Память] К достоинствам виртуальной памяти [b]не[/b] относится
	0.  (+) ввод-вывод страниц во вторичную память
	1.  (-) гибкое выделение физической памяти процессам
	2.  (-) минимизация фрагментации
	3.  (-) отсутствие ограничений на объем физической памяти
	4.  (-) правильных вариантов нет
39. [Память] При обращении процессора к ячейке памяти, принадлежащей странице, отсутствующей в главной памяти, происходит
	0.  (+) страничное нарушение
	1.  (-) страничная коллизия
	2.  (-) страничное прерывание
	3.  (-) страничное происшествие
	4.  (-) страничный коллапс
40. [Память] При функционировании виртуальной памяти нет стратегии
	0.  (+) совмещения
	1.  (-) замещения
	2.  (-) подкачки
	3.  (-) правильных вариантов нет
	4.  (-) размещения
41. [Память] Основным недостатком алгоритма замещения FIFO является то, что
	0.  (+) старая страница может активно использоваться
	1.  (-) долго искать самую старую страницу
	2.  (-) короткие процессы ждут выполнения длительных
	3.  (-) правильных вариантов нет
	4.  (-) сложно оценить возраст страницы в памяти
42. [Память] Несмотря на все достоинства, фундаментальным недостатком, делающим его непригодным, обладает алгоритм замещения страниц
	0.  (+) OPT
	1.  (-) "Второй шанс"
	2.  (-) FIFO
	3.  (-) LRU
	4.  (-) NFU
43. [Память] Алгоритм замещения WSClock оценивает
	0.  (+) рабочее множество процесса
	1.  (-) вероятность трешинга
	2.  (-) временные характеристики свопинга
	3.  (-) количество страниц в памяти
	4.  (-) правильных вариантов нет
44. [Память] К пробуксовке всей системы за счет перераспределения выделенных кадров между процессами может привести
	0.  (+) глобальный алгоритм замещения
	1.  (-) локальный алгоритм замещения
	2.  (-) подкачка по запросу
	3.  (-) подкачка с упреждением
	4.  (-) правильных вариантов нет
45. [Планирование процессов и потоков] Время между стартом процесса или постановкой задания в очередь для загрузки и его завершением – это
	0.  (+) полное время выполнения
	1.  (-) время отклика
	2.  (-) полное время ожидания
	3.  (-) среднее время отклика
	4.  (-) среднее время работы
46. [Планирование процессов и потоков] Долгосрочное планирование – это
	0.  (+) планирование заданий
	1.  (-) планирование доступа пользователей
	2.  (-) планирование загрузки процессора
	3.  (-) планирование использования процессора
	4.  (-) правильных вариантов нет
47. [Планирование процессов и потоков] Алгоритмы планирования должны обеспечивать процессам
	0.  (+) справедливость выделения времени
	1.  (-) безопасность данных
	2.  (-) гарантии длительного существования
	3.  (-) недетерминированность прерывания работы
	4.  (-) правильных вариантов нет
48. [Планирование процессов и потоков] «Последний поступивший в систему процесс выполнится последним» – алгоритм планирования процессов
	0.  (+) FCFS
	1.  (-) RR
	2.  (-) SJN
	3.  (-) SRN
	4.  (-) правильных вариантов нет
49. [Планирование процессов и потоков] «Процесс будет выполняться сразу, как только поступит в систему, если ему нужно времени меньше, чем необходимо до окончания текущему выполняемому процессу» – это алгоритм планирования процессов
	0.  (+) SRN
	1.  (-) FCFS
	2.  (-) RR
	3.  (-) SJN
	4.  (-) правильных вариантов нет
50. [Планирование процессов и потоков] Алгоритм Round Robin используется преимущественно в
	0.  (+) интерактивных системах
	1.  (-) RR-машинах
	2.  (-) пакетных ситемах
	3.  (-) правильных вариантов нет
	4.  (-) системах реального времени
51. [Планирование процессов и потоков] Суть алгоритма планирования EDF заключается в том, что
	0.  (+) первым выполняется тот процесс, у кого ближе крайний срок обработки
	1.  (-) первым выполняется наименее приоритетный процесс
	2.  (-) первым выполняется тот процесс, которому нужно меньше времени на обработку
	3.  (-) первым выполняется тот процесс, чья очередь подошла
	4.  (-) правильных вариантов нет
52. [Планирование процессов и потоков] Суть алгоритма планирования RMS заключается в том, что
	0.  (-) следующим на выполнение поступает процесс с наименьшим  крайним сроком выполнения
	1.  (+) следующим на выполнение поступает самый приоритетный процесс
	2.  (-) следующим на выполнение поступает процесс с наибольшим крайним сроком выполнения
	3.  (-) следующим на выполнение поступает самый короткий  процесс
	4.  (-) правильных вариантов нет
53. [Процессы и потоки] Запрашивая ввод данных процесс переходит в состояние
	0.  (+) блокировка
	1.  (-) взаимоблокировка
	2.  (-) выполнение
	3.  (-) готовность
	4.  (-) завершение
54. [Процессы и потоки] Находясь в состоянии готовности, процесс может быть переведен в состояние выполнения
	0.  (+) диспетчером процессов
	1.  (-) переключателем процессов
	2.  (-) процессором
	3.  (-) тумблером
	4.  (-) диспетчером памяти
55. [Процессы и потоки] Среди представленных понятий динамическим объектом является
	0.  (+) процесс
	1.  (-) алгоритм
	2.  (-) библиотека
	3.  (-) программа
	4.  (-) файл
56. [Процессы и потоки] К внутренним процессам относятся
	0.  (+) процессы, выполняемые на ЦПУ
	1.  (-) правильных вариантов нет
	2.  (-) процессы, выполняемые устройствами ввода-вывода
	3.  (-) процессы, выполняющиеся в ГПУ
	4.  (-) процессы, хранящиеся на жестком диске
57. [Процессы и потоки] Порядок и длительность пребывания процесса в допустимых состояниях на интервале существования – это
	0.  (+) трасса
	1.  (-) диаграмма состояний
	2.  (-) конечный автомат
	3.  (-) матрица переходов
	4.  (-) сетевой трафик
58. [Процессы и потоки] Два процесса, которые имеют одинаковый конечный результат обработки одних и тех же исходных данных по одной и той же или даже различным программам на одном и том же или на различных процессорах
	0.  (+) эквивалентные
	1.  (-) равные
	2.  (-) различные
	3.  (-) совпадающие
	4.  (-) тождественные
59. [Процессы и потоки] Два процесса, которые имеют одинаковый конечный результат обработки одних и тех же исходных данных по одной и той программе, но их трассы в общем случае не совпадают
	0.  (+) тождественные
	1.  (-) не совпадающие
	2.  (-) равные
	3.  (-) различные
	4.  (-) эквивалентные
60. [Процессы и потоки] Два процесса, которые имеют одинаковый конечный результат обработки одних и тех же исходных данных по одной и той программе, трассы которых совпадают
	0.  (+) равные
	1.  (-) различные
	2.  (-) совпадающие
	3.  (-) тождественные
	4.  (-) эквивалентные
61. [Процессы и потоки] При поступлении в систему процесс попадает в состояние
	0.  (+) готовность
	1.  (-) блокировка
	2.  (-) выполнение
	3.  (-) завершение
	4.  (-) ожидание
62. [Процессы и потоки] На однопроцессорной ЭВМ с многозадачной ОС в конкретный момент времени ровно один процесс может находиться в состоянии
	0.  (+) выполнение
	1.  (-) блокировка
	2.  (-) готовность
	3.  (-) завершение
	4.  (-) ожидание
63. [Процессы и потоки] Одно из достоинств этого – скорость создания и удаления, другое – общий контекст
	0.  (+) потоки управления
	1.  (-) директории
	2.  (-) потоки ввода-вывода
	3.  (-) процессы
	4.  (-) файлы
64. [Процессы и потоки] К достоинствам многопоточности не относится
	0.  (+) необходимость использования памяти для таблиц потоков
	1.  (-) использование единого контекста процесса
	2.  (-) общие файловые дескрипторы
	3.  (-) правильных вариантов нет
	4.  (-) скорость создания потоков
65. [Процессы и потоки] Блокирующий системный вызов в одном потоке приводит к блокировке всего процесса при использовании
	0.  (+) потоков на уровне пользователя
	1.  (-) мультиплексированных потоков
	2.  (-) правильных вариантов нет
	3.  (-) потоков на уровне ядра
	4.  (-) смешанной реализации потоков
66. [Процессы и потоки] Блокирующий системный вызов в одном потоке не приводит к блокировке всего процесса при использовании
	0.  (+) потоков на уровне ядра
	1.  (-) потоков ввода-вывода
	2.  (-) потоков на уровне пользователя
	3.  (-) потоков чтения-записи
	4.  (-) правильных вариантов нет
67. [Процессы и потоки] Потоки не делят между собой элементы своего процесса
	0.  (+) счётчик выполнения команд
	1.  (-) адресное пространство
	2.  (-) глобальные переменные
	3.  (-) открытые файлы
	4.  (-) таймеры
68. [Процессы и потоки] К преимуществам потоков на уровне пользователя не относится
	0.  (-) более быстрое переключение, создание и завершение потоков
	1.  (-) использование пользовательских потоков применимо для любой ОС
	2.  (-) процесс может иметь собственный алгоритм планирования
	3.  (-) такую многопоточность можно реализовать на ядре не поддерживающим многопоточность
	4.  (+) отсутствие прерывания по таймеру внутри одного процесса
69. [Процессы и потоки] К преимуществам потоков на уровне ядра не относится
	0.  (+) невозможность создания потоков на ядре без многопоточности
	1.  (-) блокирующий системный вызов не приводит к блокировке всего процесса
	2.  (-) наличие прерывания по таймеру для потоков
	3.  (-) отдельные алгоритмы планирования для потоков
	4.  (-) правильных вариантов нет
70. [Процессы и потоки] Мультиплексирование потоков – это
	0.  (+) поток ядра содержит несколько потоков пользователя
	1.  (-) потоки пользователя делятся на процессы
	2.  (-) потоки ядра дублируются
	3.  (-) правильных вариантов нет
	4.  (-) процесс разбивается по потокам на процессы
71. [Процессы и потоки] При смешанной реализации потоков
	0.  (+) при блокирующем вызове поток пользователя переходит под управление ядра
	1.  (-) поток ядра содержит несколько потоков пользователя
	2.  (-) потоки пользователя управляются ядром
	3.  (-) правильных вариантов нет
	4.  (-) при блокирующем вызове поток ядра переходит под управление пользователя
72. [Процессы и потоки] Основной недостаток смешанной реализации потоков
	0.  (+) ресурсоемкость переключения потоков в режим ядра
	1.  (-) мультиплексирование потоков
	2.  (-) невозможность контроля за потоками
	3.  (-) правильных вариантов нет
	4.  (-) сложность планирования потоков в режиме пользователя
73. [Процессы и потоки] Кооперативные процессы – это
	0.  (+) процессы, влияющие на поведение друг друга путем обмена информацией
	1.  (-) правильных вариантов нет
	2.  (-) процессы, имеющие общего предка
	3.  (-) процессы, которые запускают друг друга
	4.  (-) процессы, не влияющие на поведение друг друга
74. [Средства синхронизаци] Целая переменная, принимающая неотрицательные значения, доступ любого процесса к которой, за исключением момента ее инициализации, может осуществляться только через две атомарные операции
	0.  (+) Семафор
	1.  (-) Монитор
	2.  (-) Сигнал
	3.  (-) Переменная состояния
	4.  (-) Финальная переменная
	5.  (-) Мьютекс
75. [Средства синхронизаци] Операция P над семафором S
	0.  (+) пока S == 0 процесс блокируется;
S = S – 1;
	1.  (-) пока S == 0 процесс блокируется;
S = 1;
	2.  (-) пока S == 0 процесс блокируется;
S = S + 1;
	3.  (-) пока S == 1 процесс блокируется;
S = S – 1;
	4.  (-) пока S == 1 процесс блокируется;
S = S + 1;
76. [Средства синхронизаци] Операция V над семафором S
	0.  (+) S = S + 1
	1.  (-) S = 1
	2.  (-) S = S - 1
	3.  (-) пока S == 0 процесс блокируется;
S = S – 1;
	4.  (-) пока S == 0 процесс блокируется;
S = S + 1;
77. [Средства синхронизаци] Двоичный семафор называется
	0.  (+) мьютекс
	1.  (-) барьер
	2.  (-) двойка
	3.  (-) семафор Дейкстры
	4.  (-) семафор Петерсона
78. [Средства синхронизаци] P(empty); 
P(mutex); 
действия с буфером
V(mutex);
V(full); 

Представлен какой из алгоритмов задачи производителя-потребителя?
	0.  (+) Производитель
	1.  (-) Грузчик
	2.  (-) Официант
	3.  (-) Потребитель
	4.  (-) Философ
79. [Средства синхронизаци] Основной недостаток семафоров
	0.  (+) Сложность отслеживания вызовов семафоров
	1.  (-) Медленная работа
	2.  (-) Необходимость прямого участия программиста
	3.  (-) Необходимость участия ОС
	4.  (-) Сложность реализации
80. [Средства синхронизаци] Главный недостаток алгоритмов реализации взаимоисключения
	0.  (+) Бесполезный цикл проверки условия в прологе
	1.  (-) Невозможность реализации
	2.  (-) Необходимость прямого участия программиста
	3.  (-) Необходимость участия ОС
	4.  (-) Нет
81. [Средства синхронизаци] Монитор Хоара - это
	0.  (+) Механизм синхронизации более высокого уровня, чем семафоры
	1.  (-) OLED-дисплей нового поколения
	2.  (-) Автоматизированная система синхронизации
	3.  (-) Модифицированный LCD-дисплей
	4.  (-) Система отслеживания значений семафоров
82. [Средства синхронизаци] Представлен какой из алгоритмов задачи производителя-потребителя?

P(full); 
P(mutex); 
get_item; 
V(mutex); 
V(empty);
	0.  (-) Философ
	1.  (-) Производитель
	2.  (-) Читатель
	3.  (-) Писатель
	4.  (+) Потребитель
83. [Средства синхронизаци] Главный недостаток мониторов Хоара
	0.  (-) Невозможность реализации
	1.  (-) Реализация только на языках поддерживающих ООП
	2.  (+) Реализация только на специальных языках поддерживающих мониторы
	3.  (-) Реализация через сообщения
	4.  (-) Нет недостатков
84. [Средства синхронизаци] Механизм со скрытыми взаимоисключениями
	0.  (-) семафор
	1.  (-) мьютекс
	2.  (+) сообщения
	3.  (-) мониторы Хоара
	4.  (-) фьютекс
